---
- name: Create instance
  hosts: localhost
  tasks:
    - name: "Create {{ homework }}-vm1"
      netology86.yandex_cloud_elk.yc_create_instance:
        network_interface: "net-ru-central1-a"
        name: "{{ homework }}-vm1"
        # image_family: "centos-stream-8"
        image_family: "ubuntu-2004-lts"
        cores: 2
        memory: 4
        status: "running"

    - name: Refresh Inventory
      meta: refresh_inventory

- name: Add new host to inventory
  hosts: all
  gather_facts: false
  user: yc-user
  tasks:
    - name: Wait for system to become reachable
      wait_for_connection:
        timeout: 100

- name: Install Docker on nodes
  hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Installing necessary packages
      apt: >
          name={{ item }}
          state=present
          update_cache=yes
      with_items:
          - conntrack
          - docker.io
          - iproute2

- name: Install and run Kuber
  hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Get kube version
      uri:
        url: https://storage.googleapis.com/kubernetes-release/release/stable.txt
        return_content: yes
      register: kube_version
    - name: Download kubectl
      get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ kube_version.content }}/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
    - name: Download minikube
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'

    - name: Check Kuber version
      command: minikube version
      register: check_minikube_version
      changed_when: False
    - name: Print minikube version
      debug: 
        var: check_minikube_version.stdout_lines

    - name: Check if minikube is running
      shell: minikube status | grep host.*Running
      register: check_minikube_server
      changed_when: False
      failed_when: False
    - name: Run minikube
      block:
      - name: Run minikube
        command: 
          cmd: minikube start --vm-driver=none --apiserver-ips {{ ansible_host }} {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} 127.0.0.1
        when: check_minikube_server.rc != 0
      rescue:
      - name: Fix sysctl fs.protected_regular
        sysctl:
          name: fs.protected_regular
          value: '0'
          state: present
      - name: Rerun minikube
        command: 
          cmd: minikube start --vm-driver=none --apiserver-ips {{ ansible_host }} {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} 127.0.0.1
        when: check_minikube_server.rc != 0

    - name: Get minikube status
      command: 
        cmd: minikube status
      register: get_minikube_status
      changed_when: False
      failed_when: False
    - name: Print minikube status
      debug:
        var: get_minikube_status.stdout_lines

    - name: Get kubectl pods
      command: 
        cmd: kubectl get pods --namespace=kube-system
      register: get_pods
      changed_when: False
      failed_when: False
    - name: Print kubectl pods
      debug:
        var: get_pods.stdout_lines

- name: Run hello node in Kuber
  hosts: all
  become: yes
  gather_facts: no
  tasks:

    - name: Check if hello-node is deployed
      shell: kubectl get deployments | grep -w ^hello-node
      register: check_hello_node
      changed_when: False
      failed_when: False
    - name: Deploy hello-node
      command: 
        cmd: kubectl create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
      when: check_hello_node.rc != 0

    - name: Check if hello-node is exposed
      shell: kubectl get services | grep -w ^hello-node.*8080 
      register: check_hello_node_exposed
      changed_when: False
      failed_when: False
    - name: Expose hello-node
      command: 
        cmd: kubectl expose deployment hello-node --type=LoadBalancer --port=8080 --protocol=TCP --target-port=8080
      when: check_hello_node_exposed.rc != 0

    # - name: Make minikube service
    #   command: 
    #     cmd: minikube service hello-node

    - name: Check if dashboard is enabled
      shell: minikube addons list | grep dashboard.*enabled
      register: check_dashboard
      changed_when: False
      failed_when: False
    - name: Enable minikube addon dashboard
      command: 
        cmd: minikube addons enable dashboard
      when: check_dashboard.rc != 0

    - name: Check if metrics-server is enabled
      shell: minikube addons list | grep metrics-server.*enabled
      register: check_metrics_server
      changed_when: False
      failed_when: False
    - name: Enable minikube addon metrics-server
      command: 
        cmd: minikube addons enable metrics-server
      when: check_metrics_server.rc != 0

    - name: Check if ingress is enabled
      shell: minikube addons list | grep ingress.*enabled
      register: check_ingress
      changed_when: False
      failed_when: False
    - name: Enable minikube addon ingress
      command: 
        cmd: minikube addons enable ingress
      when: check_ingress.rc != 0

    - name: Check if proxy is running
      shell: ss -tunlp | grep 8001
      changed_when: False
      failed_when: False
      register: check_proxy
    - name: Run kubectl proxy to view dashboard
      shell: "(kubectl proxy --address='0.0.0.0' --disable-filter=true &)"
      async: 10
      poll: 0
      when: check_proxy.rc != 0

    - name: Echo dashboard link
      debug: 
        msg: "http://{{ ansible_host }}:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/"
